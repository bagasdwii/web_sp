package com.example.mobilemonitoringbankbpr.adapter

import android.app.AlertDialog
import android.content.Context
import android.graphics.Bitmap
import android.graphics.pdf.PdfRenderer
import android.net.Uri
import android.os.ParcelFileDescriptor
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.FrameLayout
import android.widget.ImageView
import android.widget.TextView
import androidx.lifecycle.LifecycleOwner
import androidx.lifecycle.Observer
import androidx.lifecycle.lifecycleScope
import androidx.recyclerview.widget.DiffUtil
import androidx.recyclerview.widget.ListAdapter
import androidx.recyclerview.widget.RecyclerView
import com.bumptech.glide.Glide
import com.example.mobilemonitoringbankbpr.R
import com.example.mobilemonitoringbankbpr.data.Nasabah
import com.example.mobilemonitoringbankbpr.databinding.ItemNasabahBinding
import com.example.mobilemonitoringbankbpr.viewmodel.MonitoringViewModel
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.io.File
import java.io.FileOutputStream
import java.net.URL

class NasabahAdapter(
    private val viewModel: MonitoringViewModel,
    private val context: Context,
    private val lifecycleOwner: LifecycleOwner
) : ListAdapter<Nasabah, NasabahAdapter.NasabahViewHolder>(NasabahDiffCallback()) {

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): NasabahViewHolder {
        val binding = ItemNasabahBinding.inflate(LayoutInflater.from(parent.context), parent, false)
        return NasabahViewHolder(binding, viewModel, context, lifecycleOwner)
    }

    override fun onBindViewHolder(holder: NasabahViewHolder, position: Int) {
        val nasabah = getItem(position)
        holder.bind(nasabah)
    }

    class NasabahViewHolder(
        private val binding: ItemNasabahBinding,
        private val viewModel: MonitoringViewModel,
        private val context: Context,
        private val lifecycleOwner: LifecycleOwner
    ) : RecyclerView.ViewHolder(binding.root) {

        fun bind(nasabah: Nasabah) {
            binding.NamaNasabah.text = nasabah.nama
            binding.CabangNasabah.text = nasabah.cabang

            viewModel.checkSuratPeringatan(nasabah.no, 3, context) { hasSuratPeringatan3 ->
                binding.btnSP3.visibility = if (hasSuratPeringatan3) View.VISIBLE else View.GONE
                if (!hasSuratPeringatan3) {
                    viewModel.checkSuratPeringatan(nasabah.no, 2, context) { hasSuratPeringatan2 ->
                        binding.btnSP2.visibility = if (hasSuratPeringatan2) View.VISIBLE else View.GONE
                        if (!hasSuratPeringatan2) {
                            viewModel.checkSuratPeringatan(nasabah.no, 1, context) { hasSuratPeringatan1 ->
                                binding.btnSP1.visibility = if (hasSuratPeringatan1) View.VISIBLE else View.GONE
                            }
                        }
                    }
                }
            }

            binding.btnSP1.setOnClickListener {
                Log.d("NasabahAdapter", "btnSP1 clicked for Nasabah No: ${nasabah.no}")
                viewModel.getSuratPeringatan(nasabah.no, 1, context)
                showSuratPeringatanDialog()
            }
            binding.btnSP2.setOnClickListener {
                Log.d("NasabahAdapter", "btnSP2 clicked for Nasabah No: ${nasabah.no}")
                viewModel.getSuratPeringatan(nasabah.no, 2, context)
                showSuratPeringatanDialog()
            }
            binding.btnSP3.setOnClickListener {
                Log.d("NasabahAdapter", "btnSP3 clicked for Nasabah No: ${nasabah.no}")
                viewModel.getSuratPeringatan(nasabah.no, 3, context)
                showSuratPeringatanDialog()
            }
        }

        private fun showSuratPeringatanDialog() {
            val dialogView = LayoutInflater.from(context).inflate(R.layout.dialog_surat_peringatan, null)
            val alertDialog = AlertDialog.Builder(context)
                .setView(dialogView)
                .setCancelable(true)
                .create()

            viewModel.suratPeringatan.observe(lifecycleOwner, Observer { suratPeringatan ->
                dialogView.findViewById<TextView>(R.id.tvTingkat).text = "Tingkat: ${suratPeringatan?.tingkat}"
                dialogView.findViewById<TextView>(R.id.tvTanggal).text = "Tanggal: ${suratPeringatan?.tanggal}"
                dialogView.findViewById<TextView>(R.id.tvKeterangan).text = "Keterangan: ${suratPeringatan?.keterangan}"

                val ivBuktiGambar = dialogView.findViewById<ImageView>(R.id.ivBuktiGambar)
                val pdfContainer = dialogView.findViewById<FrameLayout>(R.id.pdfContainer)

                suratPeringatan?.buktiGambar?.let {
                    Glide.with(context)
                        .load(it)
                        .into(ivBuktiGambar)
                }

                suratPeringatan?.scanPdf?.let { pdfUrl ->
                    downloadAndDisplayPdf(pdfUrl, pdfContainer)
                }

                Log.d("NasabahAdapter", "Surat Peringatan Dialog Data: $suratPeringatan")
            })

            alertDialog.show()
        }

        private fun downloadAndDisplayPdf(pdfUrl: String, pdfContainer: FrameLayout) {
            lifecycleOwner.lifecycleScope.launch(Dispatchers.IO) {
                try {
                    val pdfFile = File(context.cacheDir, "temp.pdf")
                    val url = URL(pdfUrl)
                    url.openStream().use { input ->
                        FileOutputStream(pdfFile).use { output ->
                            input.copyTo(output)
                        }
                    }

                    withContext(Dispatchers.Main) {
                        val parcelFileDescriptor = ParcelFileDescriptor.open(pdfFile, ParcelFileDescriptor.MODE_READ_ONLY)
                        val pdfRenderer = PdfRenderer(parcelFileDescriptor)
                        val page = pdfRenderer.openPage(0)

                        val bitmap = Bitmap.createBitmap(page.width, page.height, Bitmap.Config.ARGB_8888)
                        page.render(bitmap, null, null, PdfRenderer.Page.RENDER_MODE_FOR_DISPLAY)

                        val imageView = ImageView(context)
                        imageView.setImageBitmap(bitmap)
                        pdfContainer.addView(imageView)

                        page.close()
                        pdfRenderer.close()
                    }
                } catch (e: Exception) {
                    Log.e("NasabahAdapter", "Error downloading and displaying PDF", e)
                }
            }
        }
    }

    class NasabahDiffCallback : DiffUtil.ItemCallback<Nasabah>() {
        override fun areItemsTheSame(oldItem: Nasabah, newItem: Nasabah): Boolean {
            return oldItem.no == newItem.no
        }

        override fun areContentsTheSame(oldItem: Nasabah, newItem: Nasabah): Boolean {
            return oldItem == newItem
        }
    }
}



